простая ошибка:
1)закоментируй куски кода, проверяй запросы путем исключения по очереди
2)сравнивай ищи отличия аналогию


В такой последовательности:
1)ставь точку сначала в контроллере в return,затем в сервисе и так пока не найдется место где выполнение обрывается и дебаг не выходит. Это место ошибки.
2)если поставил точку и дебаг не выходит, значит ошибка произошла до точки, поставь точку еще раньше.

1)временно раскидай сложную строку на более простые составляющие




*Этапы отладки
1)запускаешь и смотришь на Exception в консоль Run в Idea.
2)Если ошибка, на этой строке ставишь breakPoint, в Evaluate смотришь что пришло и не пришло в переменные.Проходись брейкпоинтом расследуй от контроллера до конечной выдачи. BreakPoint поставить в этом методе(приходит неприходит) или SOUT сделай.
3)Если нет ошибки, то в PostMan проверяешь правильность работы запросов серверу(моему приложению) и как он их обрабатывает и breakPoint.

*Найти Ошибки
1)запуск(зависимость или переменные в edit config) 
2)null
3)90% случаев не та аннотация или несовместимость разных аннотаций или версий.
4)запускаем части проги по очереди, остальное закомментировать.

*Debug
Debug-поставить BreackPoint в точке где сомневаешься-красная галка ctrl+F8. В режиме debug прога выполн все, что до строки и остановиться в BreackPoint 
F8-след строка. F9-отпуст всю прогу. Если галка в красном кружке не появилась, значит, здесь ошибка. BreackPoint ставится только  где создаются объекты и внутри методов.shift+f9-запуск Debug Смотришь тип понятно какой тип где? Alt+F8-Evulate-посмотреть что в переменной. Что написано в Exception? 

*используй форматирование когда пушишь и еще вручную переносы чтобы текст был понятнее
построчная проверка

*понять где данные(переменные), где действия(методы) над данными. не должно быть неиспользуемых данных и действий

*Определиться что тестируем:
1. какие данные готовим
2. какое действие выполняем
3. что проверяем
4. писать комментарий 
5. в app и в тестах разный функционал нужно всегда делать по отдельным методам. Так проще менять прогу и ослеживать ошибки 